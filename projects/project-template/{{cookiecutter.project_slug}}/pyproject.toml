[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}}"
authors = [
    { name = "{{cookiecutter.author_name}}", email = "{{cookiecutter.author_email}}" },
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["fastapi", "api", "hello-world", "web"]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.6.0",
    "httpx>=0.25.0",
    "coverage>=7.4.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "linkify-it-py>=2.0.0",
    "sphinxcontrib-mermaid>=0.9.2",
]

[project.urls]
Homepage = "https://github.com/{{cookiecutter.author_name}}/{{cookiecutter.project_slug}}"
Repository = "https://github.com/{{cookiecutter.author_name}}/{{cookiecutter.project_slug}}"
Documentation = "https://{{cookiecutter.project_slug}}.readthedocs.io"
Issues = "https://github.com/{{cookiecutter.author_name}}/{{cookiecutter.project_slug}}/issues"

[project.scripts]
hello-world = "{{cookiecutter.package_name}}.cli:main"

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit (security)
    "PL", # pylint
]
ignore = [
    "S101",    # assert
    "PLR0913", # too-many-arguments
    "PLR2004", # magic-value-comparison (for tests)
    "UP007",   # use X | Y for union types (conflicts with Python 3.11 compatibility)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
enable_error_code = ["truthy-bool", "redundant-expr"]
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["{{cookiecutter.package_name}}"]
omit = ["tests/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--verbose", "--tb=short"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.ruff.lint.isort]
force-single-line = false
force-sort-within-sections = true
known-first-party = ["{{cookiecutter.package_name}}"]

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60
